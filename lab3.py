# -*- coding: utf-8 -*-
"""lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qt71G47HZR101BHG2ijZsks32amJ_Q7i

Mediana, medias pitagoricas, CPI y MIPS

Mediana
"""

# Commented out IPython magic to ensure Python compatibility.
# %%file calcular_median.c
# #include <stdio.h>
# #include <stdlib.h>
# 
# double calc_mediana(double *arr, int N){
#     for(int i=0; i<N-1;i++){
#         for(int j=0; j<N-1-i;j++){
#             if(arr[j]>arr[j+1]){
#                 double temp=arr[j];
#                 arr[j]=arr[j+1];
#                 arr[j+1]=temp;
# 
#             }
#         }
# 
#     }
#     if (N%2==0){
#         int index1=(N/2)-1;
#         int index2=N/2;
#         return ((arr[index1]+arr[index2])/2.0);
#     }
#     else{
#         int index=N/2;
#         return arr[index];
#     }
# }
# 
# int main(int argc, char *argv[]){
#     double *arr= (double*)calloc(3, sizeof(double));
#     //double *arr= (double*)calloc(4, sizeof(double));
#     arr[0]=10.0;
#     arr[1]=9.0;
#     arr[2]=3.0;
#     //arr[3]=5.0;
#     double median=calc_mediana(arr,3);
#     //double median=calc_mediana(arr,4);
#     printf("%lf\n", median);
# 
# }

! gcc calcular_median.c -o calcular_median

! ./calcular_median

"""Medias pitagoricas"""

# Commented out IPython magic to ensure Python compatibility.
# %%file plt_medias.c
# #include <stdio.h>
# #include <stdlib.h>
# #include <math.h>
# 
# double calc_media_arit2(double a,double b){
#     return ((a+b)/2.0);
# }
# double calc_media_arit3(double a,double b,double c){
#     return ((a+b+c)/3.0);
# }
# 
# int main(int argc, char*argv[]){
#     double a= 1.0;
#     double b= 2.0;
#     double c= 3.0;
# 
#     printf("La media aritmetica de %lf y %lf es %lf\n",a,b,calc_media_arit2(a,b));
#     printf("La media aritmetica de %lf, %lf y %lf es %lf\n",a,b,c,calc_media_arit3(a,b,c));
# }
#

! gcc plt_medias.c -o plt_medias

! ./plt_medias

"""Media geometrica"""

# Commented out IPython magic to ensure Python compatibility.
# %%file calc_media_geom.c
# #include <stdio.h>
# #include <stdlib.h>
# #include <math.h>
# 
# double calc_media_geom2(double a,double b){
#     return (pow(a*b,(1.0/2.0)));
# }
# double calc_media_geom3(double a,double b,double c){
#     return (pow(a*b*c,(1.0/3.0)));
# }
# 
# double calc_media_geom_n(double n, ){
#     return (pow())
# }
# 
# int main(int argc, char*argv[]){
# 
#     double *arr=(double*)calloc(20,sizeof(double));
#     double a= 1.0;
#     double b= 2.0;
#     double c= 3.0;
#     double
#     printf("La media geometrica de %lf y %lf es %lf\n",a,b,calc_media_geom2(a,b));
#     printf("La media geometrica de %lf, %lf y %lf es %lf\n",a,b,c,calc_media_geom3(a,b,c));
# }
#

! gcc calc_media_geom.c -o calc_media_geom -lm

! ./calc_media_geom

"""Media Armonica"""

# Commented out IPython magic to ensure Python compatibility.
# %%file calc_media_arm.c
# #include <stdio.h>
# #include <stdlib.h>
# #include <math.h>
# 
# double calc_media_arm2(double a,double b){
#     return 2.0/(1.0/a+1.0/b);
# }
# double calc_media_arm3(double a,double b,double c){
#     return 3.0/(1.0/a+1.0/b+1.0/c);
# }
# 
# 
# int main(int argc, char*argv[]){
# 
#     double a= 1.0;
#     double b= 2.0;
#     double c= 3.0;
# 
#     printf("La media armonica de %lf y %lf es %lf\n",a,b,calc_media_arm2(a,b));
#     printf("La media armonica de %lf, %lf y %lf es %lf\n",a,b,c,calc_media_arm3(a,b,c));
# }

! gcc calc_media_arm.c -o calc_media_arm -lm

! ./calc_media_arm

"""CPI y MIPS"""

! lscpu | grep 'CPU MHz'

# Commented out IPython magic to ensure Python compatibility.
# %%file suma.c
# int suma(int a, int b){
#     return (a+b);
# }

! gcc -Os -c suma.c -o suma.o

! objdump -M intel -j .text -D suma.o

# Commented out IPython magic to ensure Python compatibility.
# %%file main.c
# #include <x86intrin.h>
# #include <stdio.h>
# #include <stdlib.h>
# #include <time.h>
# 
# int suma(int a, int b){
#     return (a+b);
# }
# 
# int calc_num_instr(void){
#     return 3;
# }
# 
# double calcular_CPI(long int num_cic, int num_inst){
#     return ((double)num_cic/(double)num_inst);
# }
# 
# double calcular_MIPS(double freq, double CPI){
#     return (freq/CPI);
# }
# 
# int main(int argc,char *argv[]){
#     srand(time(NULL));
#     int a,b;
#     long int tic, toc, ciclos;
# 
#     int num_instr= calc_num_instr();
#     int sum=0;
#     double freq= 2199.998*1000000;
#     double CPI, MIPS;
# 
#     a= (int)(rand()%9);
#     b= (int)(rand()%9);
# 
#     tic= __rdtsc();
#     sum=suma(a,b);
#     toc= __rdtsc();
# 
#     ciclos= toc-tic;
# 
#     CPI= calcular_CPI(ciclos, num_instr);
#     printf("CPI: %lf\n",CPI);
#     MIPS= calcular_MIPS(freq,CPI);
#     printf("MIPS: %lf\n",MIPS);
# }

! gcc -os main.c -o main

! ./main

! lscpu | grep 'CPU MHz'