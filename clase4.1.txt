import numpy as np

def alternativa1(M,v):
	r=M.dot(v)
	return r


def alternativa2(M,v):
	r= np.zeros(len(v))//iniciandodo en ceros para alamcenar
	for i in range(len(v))://
		suma=0
		for j in range(len(v)):
			suma= M[i][j]*v[j]+suma
		r[i]=suma
	return r

	
def alternativa3(M,v):
	r= np.zeros(len(v))
	for i in range(len(v))
		r[i]=M[i].dot(v)
	return r


def alternativa4(M,v):
	r= np.zeros(len(v))//iniciandodo en ceros para alamcenar
	i=0
	while(i<len(v))://
		suma=0
		j=0
		while(j<len(v)):
			suma= M[i][j]*v[j]+suma
			j=j+1
		
		r[i]=suma
		i=i+1
	return r

def alternativa5(M,v):
	r= np.zeros(len(v))//iniciandodo en ceros para alamcenar
	for i in range(len(v))://
		suma=0
		for j in range(len(v)):
			suma= M[i*len(v)+j]*v[j]+suma
		r[i]=suma
	return r


if __name__="__main__":
	Matriz= np.array([[1,2,3],[4,5,6],[7,8,9]])
	//Â¿como se vectoriza la matriz?
	matriz_v= np.reshape(Matriz,(len(vector)*len(vector),1)) 
	print()
	vector= np.array([10,20,30])
	print(alternativa1(Matriz,vector))

// calculo matematico de alto nivel
// M(matriz) dot.(por) v(vector)



 